{
  "component_image_2x1": {
    "width": 2240,
    "height": 1120,
    "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/8ca3cbe5fcece24a4c02ce0cf1a9f432449040ca969a053b69f3fca9fe3735cdeaa7f8df69fad89808e1f3ca5a345bc30e4bbc605ed69e26ae184877ce21689b",
    "url": "/lh3.googleusercontent.com/b57myMcwNFPWDTcQzk8VQJq1kLWfAzj2w2jn4KrbOMKfjbX3mvgVhgl2z13K7WgsoNyp2Rdtj_LL8Fot4Shh7T2yRzO8ewumLJL3AJ9-O1F4GAEoPhk"
  },
  "dark_component_image_2x1": {
    "width": 2240,
    "height": 1120,
    "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/7464d0de12acd618255999be2af8233440866047556e4e958a3aedb44a6c4d26863b7f82a7ecefb29aa41d9033ec6fccdf6d8ab44272f950fc7e84ce92ad624f",
    "url": "/lh3.googleusercontent.com/hIsU7daJOzmY2SZ295Vk8A3JvmlZUUYvoNH15D7-BEBQcyQB-N78pibLWc72n0njJsgKjEdKcEbS29x-eex0li6iqEKZ-SJj4y25VN5lNAXuisI9MA"
  },
  "component_image_1x1": {},
  "metadata": {
    "keywords": "Material, Material Design, Google Material, Google, Material Design 3, Material 3, Material You, Material Design Components, Material Components, components, menus",
    "share_image": {
      "width": 1200,
      "height": 630,
      "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/903df5384fb653e43f40b4fe940a588135b3cc6cd10d83eae8e984f6a89c35ea174af76c1c03ac218b640276305a9d1cbaa5a8ab66b00cf6f9e753537143142d",
      "url": "/lh3.googleusercontent.com/G2rOn0XFkJzt4UQDaZ5gajPGGyTnnBwFYlDykILfOFV15jivZqevKpHEZ3GBeavz6qDjeoyNjm1h719l1ONYIJ1Wa-yVpS9Tqu_iqSUYCHl7FfFigNf4"
    },
    "share_description": "Menus display a list of choices on a temporary surface. They appear when users interact with a button, action, or other control.",
    "share_title": "Menus \u2013 Material Design 3"
  },
  "jetpack": {},
  "dark_component_image_3x1": {
    "width": 3360,
    "height": 1120,
    "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/9a32a95f8cc5db25d1a30b69a202fbd827346d984228523c3c77b23fc8e06c3de0e8a2d6e444e8ee7282fd4347dab4bebd3cb354a27490d6b81d03c210fddcdc",
    "url": "/lh3.googleusercontent.com/XGDAQtp0soQJNzGpv46_wOkT9bxsmVTAE3CokYvhI5f74_q5MW5gTKP5NSfL1M6OvZtKXJQMPcF8BBhqzG4SsPX5kbthQRZVRQK2LaJxVcZ84dHrlw"
  },
  "document_id": "4984542628413440",
  "dark_component_image_3x2": {
    "width": 1680,
    "height": 1120,
    "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/48a71eeab9d7b0de8f14d72641af8b30e52ec23e14ef61d67f273f061fc4d41db37282130da7eb3c996c068e5e964113320be07c1d9affebef2ef8a8a6d8edf9",
    "url": "/lh3.googleusercontent.com/_7Qe-ErcypmtsdTnGAqcvQ5k7OvAFDiSrMF65cWrlX6lhJMxAhg_U3jcbCYp3_BRS6h1qYdRYXmNKVnGkWkGNuyQCsH1a014zMjxEqMJ9QqQ5qOU9tM"
  },
  "mdc_flutter": {
    "meta": {
      "keywords": null,
      "share_image": {},
      "share_description": null,
      "share_title": null
    },
    "banners": [
      {
        "title": "Flutter support in progress",
        "links": [],
        "description": "<p>The Flutter team is currently working on Material Design 3 support for <code>Menus</code>. Follow the&nbsp;<a href=\"https://github.com/flutter/flutter/issues/91605\" target=\"_blank\" rel=\"noopener\">GitHub issue</a>&nbsp;and&nbsp;<a href=\"https://twitter.com/FlutterDev\" target=\"_blank\" rel=\"noopener\">@FlutterDev</a>&nbsp;for additional updates.</p>"
      }
    ],
    "hide_generic_not_available_message": true,
    "hide_intro_block": true,
    "document_id": "5917820973744128",
    "markdown_content": null,
    "title": "Menus",
    "image": [],
    "up_next_section": {
      "items": []
    },
    "is_beta": false,
    "markdown_path": null
  },
  "component_image_3x1": {
    "width": 3360,
    "height": 1120,
    "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/d695cdb222adac523e52d66ec8d657877b5fa0f9c9196dafbefecf4dd9982bc0013c8137206b89f33f3354d53c1bed629fb0b5091fe57520fc62fafcb846f78b",
    "url": "/lh3.googleusercontent.com/YIOZP01CyemQynBBEL948MoJXmc9y3XGMBqI9QYKo87eX5Lhe0vXe9cAbGShkRljHuP3AgLR8QSC0tBQjlqMb8WUcu6ehpRhlOrySgHouto2Aq6org"
  },
  "component_image_position": "center",
  "component_image_3x2": {
    "width": 1680,
    "height": 1120,
    "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/d0bad428917c8d0a151bc24c4bc0133353d7ffa5e1a1013b55124ef1f334194f9ab1cf942f1139073fb68719408dce2edbd6e35e059bfbd85728cfdb50e0eb9f",
    "url": "/lh3.googleusercontent.com/a8ju0_pLCPPjUl4rrMOpfyGwxQUvcOgCt87goXyl6eGOJcknK8BGuD_H-i9tbfRsWj91BjXRnezz8TsQSLSqzMmnzYixJ8U0T7QbcHMh6VYDPKX13tM2"
  },
  "page_hero": {
    "foreground_image_2x1": {
      "width": 4000,
      "height": 2000,
      "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/91001d175e34c9875db29218f838b9bb770f73ccf9c7f16e0a87d66be7df916f83ef2963726d337965876c11e38aa4da4e5cc0d21b45321b3b0b8040cae02a01",
      "url": "/lh3.googleusercontent.com/0Mrhv8-D2ndIs2LUsnQrZMtMpFmuZZ8Y-QwyVm9HohtP6R2lgTxJ2xH0XXq9CBHEbgu-VPb-wYxze4y5r6owesXRIPhdRedYy9J7xNRHkoWGQlv8JOw"
    },
    "foreground_image_1x1": {
      "width": 2240,
      "height": 2240,
      "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/3a81b75c2842508342ecaff2e7c690d9418d02145ee18278b31b125be0cb0c3bc667e4f4520c8c2dad986095869471bb40b902234f947010d30a285c48b2faa1",
      "url": "/lh3.googleusercontent.com/10IsTit703tB8qMs-VN45WmdM1SzWh03RY4HZI6vRa0Vri4ei5uT1zD7U9svYUV4qmGiZcEP8vIO92kLuHTSQKz5gjO-pPVQ-6zYXnS4iSFjIM3OfhRV"
    },
    "full_width_content_centered": false,
    "foreground_image_1x1_dark_mode": {
      "width": 2240,
      "height": 2240,
      "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/a06186b8d62d00860aa30f62835bba91930f86511b98cf7ad33145cdbbe409405f75c6e6ffa80bc65376d3cf973e0f6aec3a08769413b4070e2a48f96af4e23d",
      "url": "/lh3.googleusercontent.com/lP3c_k7n_mZkd2hEIWsEVizLvYxFqvnmcwfmFbFIBQFqbltmBvrhH7BN024rLr_Rd2ETb-wtbMEoCfJsFq67w3lKdPawTv3dbwr16_3aUb-KAhcTZg"
    },
    "main_background_image": {},
    "foreground_image_2x1_dark_mode": {
      "width": 4000,
      "height": 2000,
      "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/b6033c4e88aaca362d13069b151661733903c640d281b1f036e2501cff99a943d4b6d8566d9e7ffb2e17060abb73896e10397c7abaace81af71adc226ffd47e1",
      "url": "/lh3.googleusercontent.com/aXnW-BDycrlAJgt_R7KVwIQpCVnCVL3IBz5VCBX1KvJdSB7ofSBo9f4eP1lEe-chAnPUUYZMyP_RcrsUXgpenFItFMhK6kphk8BSEoIX_ssLy3sDI5ct"
    },
    "horizontal_foreground_alignment_override": null,
    "full_width": false,
    "main_background_image_dark_mode": {},
    "vertical_foreground_alignment_override": "position_bottom",
    "split_background_image": {
      "width": 6927,
      "height": 6927,
      "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/6b9e9942547d7f7156a4674eb696cf277f226c592de3b5a44c244392b123b3b0a052bf406732d81b7efa350c74cd37c91ebf69ddbf104f310b9ae371cdbc6a72",
      "url": "/lh3.googleusercontent.com/5jGXnAMBDgcPVoVgcuscUraZLZObNVuBqZaoBmQLKE1Gbh4IKEseNifBdoKlZtk053rbA5FEg09yxiE7dC2zXIt-1d3QzXbK8cezVnNxi4p1JDrdwao"
    },
    "split_background_image_dark_mode": {
      "width": 6927,
      "height": 6927,
      "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/1d4352785a7240b3fc111c40f4e2b552b4e55a65b8e6c00289d2438786e86b6671facda00d8b1eac8e6257c8af15c273b1fde0268556a694d5dc930c2f8e41a5",
      "url": "/lh3.googleusercontent.com/TUtF3Nu0TqpTjBVCnAlQzmudn40SuUGFijtLriu9SMHZd-qz9kvLcQets_bYi5kzad_NIAuHyC9TnV9sPfg7IDVtICq7cq4zzdAELFC7adcP0C-UIYQ"
    }
  },
  "ia_title": "Components / Menus",
  "title": "Menus",
  "dark_component_image_1x1": {},
  "mdc_web": {},
  "mdc_android": {
    "meta": {
      "keywords": null,
      "share_image": null,
      "share_description": null,
      "share_title": null
    },
    "banners": [
      {
        "title": "Jetpack Compose support available",
        "links": [
          {
            "href": "https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#DropdownMenu(kotlin.Boolean,kotlin.Function0,androidx.compose.ui.Modifier,androidx.compose.ui.unit.DpOffset,androidx.compose.ui.window.PopupProperties,kotlin.Function1)",
            "aria_label": "Read about implementing Material Design 3 AlertDialogs using Jetpack Compose",
            "label": "DropdownMenu API Reference",
            "open_new_window": true
          },
          {
            "href": "https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#ExposedDropdownMenuBox(kotlin.Boolean,kotlin.Function1,androidx.compose.ui.Modifier,kotlin.Function1)",
            "aria_label": "Read about implementing Material Design 3 ExposedDropdownMenu using Jetpack Compose",
            "label": "ExposedDropdownMenu API Reference",
            "open_new_window": true
          }
        ],
        "description": "<p>Menus are available in the Material Design 3 library for Jetpack Compose. For implementation details, visit the <code>androidx.compose.material3</code>&nbsp;<a href=\"https://developer.android.com/jetpack/androidx/releases/compose-material3\" target=\"_blank\" rel=\"noopener\">library documentation on Android Developers</a>:</p>"
      }
    ],
    "hide_generic_not_available_message": true,
    "hide_intro_block": true,
    "document_id": "6426597019877376",
    "markdown_content": "<!--docs:\ntitle: \"Menus\"\nlayout: detail\nsection: components\nexcerpt: \"Menus display a list of choices on temporary surfaces.\"\niconId: menu\npath: /catalog/menus/\n-->\n\n# Menus\n\n[Menus](https://material.io/components/menus) display a list of choices on\ntemporary surfaces.\n\n<mio-image index=0></mio-image>\n\n**Contents**\n\n*   [Using menus](#using-menus)\n*   [Dropdown menus](#dropdown-menus)\n*   [Exposed dropdown menus](#exposed-dropdown-menus)\n*   [Theming](#theming-menus)\n\n## Using menus\n\nA menu displays a list of choices on a temporary surface. They appear when users\ninteract with a button, action, or other control.\n\nBefore you can use Material menus, you need to add a dependency to the Material\nComponents for Android library. For more information, go to the\n[Getting started](/libraries/mdc-android/getting-started)\npage.\n\nA typical menu resource looks like this:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:id=\"@+id/option_1\"\n          android:title=\"@string/option_1\" />\n    <item android:id=\"@+id/option_2\"\n          android:title=\"@string/option_2\" />\n    <item android:id=\"@+id/option_3\"\n          android:title=\"@string/option_3\" />\n</menu>\n```\n\nA typical exposed dropdown menu looks like this:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    android:id=\"@+id/menu\"\n    style=\"@style/Widget.Material3.TextInputLayout.FilledBox.ExposedDropdownMenu\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:hint=\"@string/label\">\n\n    <AutoCompleteTextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:inputType=\"none\"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\nSee the [dropdown menus](#dropdown-menus) and\n[exposed dropdown menus](#exposed-dropdown-menus) sections for detailed usage\ninformation.\n\n### Making menus accessible\n\nMenus are readable by most screen readers, such as TalkBack. Text rendered in\nmenus is automatically provided to accessibility services. Additional content\nlabels are usually unnecessary.\n\nAndroid's exposed dropdown menu component APIs support both label text and\nhelper text, which tell the user what information is requested for a menu. While\noptional, their use is strongly encouraged. For more information about this\ncomponent's accessibility, check out\n[the text field's a11y section](https://www.github.com/material-components/material-components-android/tree/master/docs/components/TextField.md#making-text-fields-accessible).\n\n### Types\n\nMenus allow users to make a selection from multiple options. They are less\nprominent and take up less space than selection controls, such as a set of radio\nbuttons.\n\nThere are two types of menus: 1\\. [Dropdown menus](#dropdown-menus) (overflow,\ncontext, popup, and list popup window menus), 2\\.\n[Exposed dropdown menus](#exposed-dropdown-menus).\n\n<mio-image index=1></mio-image>\n\n## Dropdown menus\n\nDropdown menus display a list of options, triggered by an icon, button, or\naction. Their placement varies based on the element that opens them.\n\n### Dropdown menu examples\n\nAPI and source code:\n\n*   `Menu`\n    *   [Class definition](https://developer.android.com/reference/android/view/Menu)\n*   `MenuInflater`\n    *   [Class definition](https://developer.android.com/reference/android/view/MenuInflater)\n*   `ContextMenu`\n    *   [Class definition](https://developer.android.com/reference/android/view/ContextMenu)\n*   `PopupMenu`\n    *   [Class definition](https://developer.android.com/reference/android/widget/PopupMenu)\n*   `ListPopupWindow`\n    *   [Class definition](https://developer.android.com/reference/android/widget/ListPopupWindow)\n\n#### Overflow menus\n\nThe following example shows an overflow menu.\n\n<mio-image index=2></mio-image>\n\nIn code:\n\n```kt\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\n    val inflater: MenuInflater = menuInflater\n    inflater.inflate(R.menu.overflow_menu, menu)\n    return true\n}\n```\n\nIn `res/menu/overflow_menu.xml`:\n\n```xml\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:id=\"@+id/option_1\"\n          android:title=\"@string/option_1\" />\n    <item android:id=\"@+id/option_2\"\n          android:title=\"@string/option_2\" />\n    <item android:id=\"@+id/option_3\"\n          android:title=\"@string/option_3\" />\n</menu>\n```\n\n#### Context menus\n\nThe following example shows a context menu that appears when a `TextView` is\npressed for a designated amount of time.\n\n<mio-image index=3></mio-image>\n\nIn code:\n\n```kt\noverride fun onCreate(savedInstanceState: Bundle?) {\n    ...\n    val contextMenuTextView = view.findViewById<TextView>(R.id.context_menu_tv)\n    // Register context menu for TextView\n    registerForContextMenu(contextMenuTextView)\n}\n\noverride fun onCreateContextMenu(menu: ContextMenu, v: View, menuInfo: ContextMenu.ContextMenuInfo?) {\n    val contextMenuTextView = v as TextView\n    val context = context\n    // Add menu items via menu.add\n    menu.add(R.string.option_1)\n        .setOnMenuItemClickListener { item: MenuItem? ->\n            // Respond to item click.\n      }\n    menu.add(R.string.option_2)\n        .setOnMenuItemClickListener { item: MenuItem? ->\n            // Respond to item click.\n      }\n}\n\noverride fun onContextMenuClosed(menu: Menu) {\n    // Respond to context menu being closed.\n}\n```\n\nIn the layout:\n\n```xml\n<TextView\n    android:id=\"@+id/context_menu_tv\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:padding=\"16dp\"\n    android:text=\"@string/menu_context_menu_description\"/>\n```\n\nAlternatively, you can inflate a context menu in `onCreateContextMenu` (as with\nthe overflow menu):\n\n```kt\noverride fun onCreateContextMenu(menu: ContextMenu, v: View, menuInfo: ContextMenu.ContextMenuInfo?) {\n  super.onCreateContextMenu(menu, v, menuInfo)\n  val inflater: MenuInflater = menuInflater\n  inflater.inflate(R.menu.context_menu, menu)\n}\n\n// Then, to handle clicks:\noverride fun onContextItemSelected(item: MenuItem): Boolean {\n  val info = item.menuInfo as AdapterView.AdapterContextMenuInfo\n  return when (item.itemId) {\n    R.id.option_1 -> {\n      // Respond to context menu item 1 click.\n      true\n    }\n    R.id.option_2 -> {\n      // Respond to context menu item 2 click.\n      true\n    }\n    else -> super.onContextItemSelected(item)\n  }\n}\n```\n\nwith a `res/menu/context_menu.xml`:\n\n```xml\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:id=\"@+id/option_1\"\n          android:title=\"@string/option_1\" />\n    <item android:id=\"@+id/option_2\"\n          android:title=\"@string/option_2\" />\n</menu>\n```\n\n#### Popup menus\n\nThe following example shows a popup menu that displays when a button is clicked.\n\n<mio-image index=4></mio-image>\n\nIn code:\n\n```kt\noverride fun onCreate(savedInstanceState: Bundle?) {\n    ...\n    val button = view.findViewById<Button>(R.id.menu_button)\n    button.setOnClickListener { v: View ->\n        showMenu(v, R.menu.popup_menu)\n    }\n}\n\nprivate fun showMenu(v: View, @MenuRes menuRes: Int) {\n    val popup = PopupMenu(context!!, v)\n    popup.menuInflater.inflate(menuRes, popup.menu)\n\n    popup.setOnMenuItemClickListener { menuItem: MenuItem ->\n        // Respond to menu item click.\n    }\n    popup.setOnDismissListener {\n        // Respond to popup being dismissed.\n    }\n    // Show the popup menu.\n    popup.show()\n}\n```\n\nIn the layout:\n\n```xml\n<Button\n    android:id=\"@+id/menu_button\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/show_menu\"/>\n```\n\nIn `res/menu/popup_menu.xml`:\n\n```xml\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:id=\"@+id/option_1\"\n          android:title=\"@string/option_1\" />\n    <item android:id=\"@+id/option_2\"\n          android:title=\"@string/option_2\" />\n    <item android:id=\"@+id/option_3\"\n          android:title=\"@string/option_3\" />\n</menu>\n```\n\n##### Adding icons to popup menus\n\nCurrently, there is no public API to add icons to popup menus. The following\nworkaround is for API 21+, and uses library-only APIs, and is not guaranteed to\nwork in future versions.\n\nThe following example shows a popup menu with icons.\n\n<mio-image index=5></mio-image>\n\nIn code:\n\n```kt\n//In the showMenu function from the previous example:\nprivate fun showMenu(v: View, @MenuRes menuRes: Int) {\n    val popup = PopupMenu(context!!, v)\n    popup.menuInflater.inflate(menuRes, popup.menu)\n    ...\n    if (popup.menu is MenuBuilder) {\n        val menuBuilder = popup.menu as MenuBuilder\n        menuBuilder.setOptionalIconsVisible(true)\n        for (item in menuBuilder.visibleItems) {\n            val iconMarginPx =\n                TypedValue.applyDimension(\n                    TypedValue.COMPLEX_UNIT_DIP, ICON_MARGIN.toFloat(), resources.displayMetrics)\n                .toInt()\n            if (item.icon != null) {\n              if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP) {\n                  item.icon = InsetDrawable(item.icon, iconMarginPx, 0, iconMarginPx,0)\n              } else {\n                  item.icon =\n                      object : InsetDrawable(item.icon, iconMarginPx, 0, iconMarginPx, 0) {\n                          override fun getIntrinsicWidth(): Int {\n                              return intrinsicHeight + iconMarginPx + iconMarginPx\n                      }\n                }\n              }\n          }\n      }\n    }\n    ...\n    popup.show()\n}\n```\n\nIn `res/menu/popup_menu.xml`:\n\n```xml\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:id=\"@+id/option_1\"\n          android:icon=\"@drawable/ic_3d_rotation_24dp\"\n          android:title=\"@string/option_1\" />\n    <item android:id=\"@+id/option_2\"\n          android:icon=\"@drawable/ic_accelerator_24dp\"\n          android:title=\"@string/option_2\" />\n    <item android:id=\"@+id/option_3\"\n          android:icon=\"@drawable/ic_favorite_24dp\"\n          android:title=\"@string/option_3\" />\n</menu>\n```\n\n#### List popup window menus\n\nThe following example shows a list popup window menu that appears when a button\nis clicked.\n\n<mio-image index=6></mio-image>\n\nIn code:\n\n```kt\nval listPopupWindowButton = view.findViewById<Button>(R.id.list_popup_button)\nval listPopupWindow = ListPopupWindow(context!!, null, R.attr.listPopupWindowStyle)\n\n// Set button as the list popup's anchor\nlistPopupWindow.anchorView = listPopupWindowButton\n\n// Set list popup's content\nval items = listOf(\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\")\nval adapter = ArrayAdapter(requireContext(), R.layout.list_popup_window_item, items)\nlistPopupWindow.setAdapter(adapter)\n\n// Set list popup's item click listener\nlistPopupWindow.setOnItemClickListener { parent: AdapterView<*>?, view: View?, position: Int, id: Long ->\n  // Respond to list popup window item click.\n\n  // Dismiss popup.\n  listPopupWindow.dismiss()\n}\n\n// Show list popup window on button click.\nlistPopupWindowButton.setOnClickListener { v: View? -> listPopupWindow.show() }\n```\n\nIn the layout:\n\n```xml\n<Button\n    android:id=\"@+id/list_popup_button\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/show_menu\"/>\n```\n\nIn the item layout `res/layout/list_popup_window_item.xml`:\n\n```xml\n<TextView\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:padding=\"16dp\"\n    android:ellipsize=\"end\"\n    android:maxLines=\"1\"\n    android:textAppearance=\"?attr/textAppearanceBodyLarge\"\n/>\n```\n\n### Anatomy and key properties\n\nThe following are menu anatomy diagrams showing all possible elements:\n\n<mio-image index=7></mio-image>\n\n1.  List item\n2.  Leading icon\n3.  Trailing icon\n4.  Trailing text\n5.  Container\n6.  Divider\n\n#### Container attributes\n\nElement        | Attribute                     | Related method(s) | Default value\n-------------- | ----------------------------- | ----------------- | -------------\n**Background** | `android:popupMenuBackground` | N/A               | `?attr/popupMenuBackground`\n**Color**      | N/A                           | N/A               | `?attr/colorSurface`\n**Elevation**  | `android:popupElevation`      | N/A               | `3dp`\n\n#### Text attributes\n\nElement        | Attribute                                                                     | Related method(s)                                                  | Default value\n-------------- | ----------------------------------------------------------------------------- | ------------------------------------------------------------------ | -------------\n**Text label** | `android:title`                                                               | `getMenu().add`<br/>`getMenu().addSubMenu`<br/>`getMenu().getItem` | N/A\n**Typography** | `?attr/textAppearanceLargePopupMenu`<br/>`?attr/textAppearanceSmallPopupMenu` | N/A                                                                | `?attr/textAppearanceBodyLarge`\n\n#### Styles\n\nElement                     | **Theme attribute**              | **Default value**\n--------------------------- | -------------------------------- | -----------------\n**Popup menus**             | `?attr/popupMenuStyle`           | `@style/Widget.Material3.PopupMenu`\n**List popup window style** | `?attr/listPopupWindowStyle`     | `@style/Widget.Material3.PopupMenu.ListPopupWindow`\n**Context menus**           | `?android:contextPopupMenuStyle` | `@style/Widget.Material3.PopupMenu.ContextMenu`\n**Overflow menus**          | `?attr/actionOverflowMenuStyle`  | `@style/Widget.Material3.PopupMenu.Overflow`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/menu/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/menu/res/values/attrs.xml).\n\n## Exposed dropdown menus\n\nExposed dropdown menus display the currently selected menu item above a list of\noptions. Some variations can accept user-entered input.\n\n**Note:** The exposed dropdown menu is implemented through the\n`TextInputLayout`. For detailed information on\n[Material text fields](https://material.io/design/components/text-fields.html)\nand their usage, see the [TextInputLayout documentation](components/text-fields).\n\n### Exposed dropdown menu example\n\nAPI and source code:\n\n*   `TextInputLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputLayout.java)\n*   `AutoCompleteTextView`\n    *   [Class definition](https://developer.android.com/reference/android/widget/AutoCompleteTextView)\n*   `MaterialAutoCompleteTextView`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/MaterialAutoCompleteTextView)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/MaterialAutoCompleteTextView.java)\n\n**Note:** `MaterialComponentsViewInflater` auto-inflates\n`<AutoCompleteTextView>` to\n`<com.google.android.material.textfield.MaterialAutoCompleteTextView>` when\nusing `Theme.Material3.*` themes.\n\nThe following is an example of a filled exposed dropdown menu:\n\n<mio-image index=8></mio-image>\n\nIn the layout:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    android:id=\"@+id/menu\"\n    style=\"@style/Widget.Material3.TextInputLayout.FilledBox.ExposedDropdownMenu\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:hint=\"@string/label\">\n\n    <AutoCompleteTextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:inputType=\"none\"\n        app:simpleItems=\"@array/simple_items\"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\nThe string array specified by `app:simpleItems` will be used as the default\nitem strings for auto-completion. Or you can also set it programmatically:\n\n```kt\nval items = arrayOf(\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\")\n(textField.editText as? MaterialAutoCompleteTextView)?.setSimpleItems(items)\n```\n\nAlternatively, to have more control over the auto-completion items rendering,\nyou can also provide a custom item adapter by:\n\n```kt\nval items = listOf(\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\")\nval adapter = ArrayAdapter(requireContext(), R.layout.list_item, items)\n(textField.editText as? AutoCompleteTextView)?.setAdapter(adapter)\n```\n\nAnd a custom item layout (`list_item.xml`):\n\n```xml\n<TextView\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:padding=\"16dp\"\n    android:ellipsize=\"end\"\n    android:maxLines=\"1\"\n    android:textAppearance=\"?attr/textAppearanceBodyLarge\"\n/>\n```\n\nTo use the exposed dropdown menu with an outlined text field, set the `style` to\n`@style/Widget.Material3.TextInputLayout.OutlinedBox.ExposedDropdownMenu`:\n\n<mio-image index=9></mio-image>\n\n#### Non editable variation\n\nFor a non-editable menu, disable the user input in the `AutoCompleteTextView` by\nsetting `android:inputType=\"none\"` on the `AutoCompleteTextView`.\n\n#### Setting a default value\n\nIn order to have a pre-selected value displayed, you can call\n`setText(CharSequence text, boolean filter)` on the `AutoCompleteTextView` with\nthe filter set to `false`.\n\n### Anatomy and key properties\n\nThe exposed dropdown menu is an `AutoCompleteTextView` within a\n`TextInputLayout`. It displays a dropdown menu below a text field.\n\n<mio-image index=10></mio-image>\n\n1.  Text\n2.  Container\n3.  Label\n4.  Selection/Input text\n5.  Trailing icon\n\n#### `TextInputLayout` attributes (container, label, trailing icon)\n\nFor all attributes that apply to the `TextInputLayout`, see the\n[TextInputLayout documentation](components/text-fields).\n\n#### `MaterialAutoCompleteTextView` attributes (input text, dropdown menu)\n\nElement                                   | Attribute                                                           | Related method(s)                                                             | Default value\n----------------------------------------- | ------------------------------------------------------------------- | ----------------------------------------------------------------------------- | -------------\n**Input text**                            | `android:text`                                                      | `setText`<br/>`getText`                                                       | `@null`\n**Typography**                            | `android:textAppearance`                                            | `setTextAppearance`                                                           | `?attr/textAppearanceBodyLarge`\n**Input accepted**                        | `android:inputType`                                                 | `N/A`                                                                         | framework's default\n**Input text color**                      | `android:textColor`                                                 | `setTextColor`<br/>`getTextColors`<br/>`getCurrentTextColor`                  | `?android:textColorPrimary`\n**Cursor color**                          | N/A (color comes from the theme attr `?attr/colorControlActivated`) | N/A                                                                           | `?attr/colorPrimary`\n**Dropdown menu<br/>container color**     | N/A                                                                 | N/A                                                                           | `?attr/colorSurface`\n**Dropdown menu elevation**               | `android:popupElevation`                                            | `getPopupElevation`                                                           | `3dp`\n**Simple items**                          | `app:simpleItems`                                                   | `setSimpleItems`                                                              | `null`\n**Simple item layout**                    | `app:simpleItemLayout`                                              | N/A                                                                           | `@layout/m3_auto_complete_simple_item`\n**Selected simple item color**            | `app:simpleItemSelectedColor`                                       | `setSimpleItemSelectedColor`<br/>`getSimpleItemSelectedColor`                 | `?attr/colorSurfaceVariant`\n**Selected simple item<br/>ripple color** | `app:simpleItemSelectedRippleColor`                                 | `setSimpleItemSelectedRippleColor`<br/>`getSimpleItemSelectedRippleColor`     | `@color/m3_simple_item_ripple_color`\n\n#### Styles\n\nElement            | Style\n------------------ | -----\n**Filled style**   | `Widget.Material3.TextInputLayout.FilledBox.ExposedDropdownMenu`\n**Outlined style** | `Widget.Material3.TextInputLayout.OutlinedBox.ExposedDropdownMenu`\n**Filled dense**   | `Widget.Material3.TextInputLayout.FilledBox.Dense.ExposedDropdownMenu`\n**Outlined dense** | `Widget.Material3.TextInputLayout.OutlinedBox.Dense.ExposedDropdownMenu`\n\nDefault style theme attribute: `?attr/textInputStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/values/attrs.xml).\n\n## Theming menus\n\nMenus drawers support\n[Material Theming](https://material.io/components/text-fields/#theming) which\ncan customize color, typography and shape.\n\n### Menu theming examples\n\nPopup, overflow, and list popup window menus support\n[Material Theming](https://material.io/components/chips/#theming) which can\ncustomize typography.\n\nAPI and source code:\n\n*   `Menu`\n    *   [Class definition](https://developer.android.com/reference/android/view/Menu)\n*   `MenuInflater`\n    *   [Class definition](https://developer.android.com/reference/android/view/MenuInflater)\n*   `ContextMenu`\n    *   [Class definition](https://developer.android.com/reference/android/view/ContextMenu)\n*   `PopupMenu`\n    *   [Class definition](https://developer.android.com/reference/android/widget/PopupMenu)\n*   `ListPopupWindow`\n    *   [Class definition](https://developer.android.com/reference/android/widget/ListPopupWindow)\n\nThe following example shows a menu with Material Theming.\n\n<mio-image index=11></mio-image>\n\n### Implementing menu theming\n\nUse default style theme attributes, which affect all menus but do not affect\nother components:\n\n```xml\n<style name=\"Theme.App\" parent=\"Theme.Material3.*\">\n    ...\n    <item name=\"textAppearanceLargePopupMenu\">@style/TextAppearance.App.BodyLarge</item>\n    <item name=\"textAppearanceSmallPopupMenu\">@style/TextAppearance.App.BodyLarge</item>\n    <item name=\"popupMenuBackground\">@drawable/custom_popup_background</item>\n</style>\n\n<style name=\"TextAppearance.App.BodyLarge\" parent=\"TextAppearance.Material3.BodyLarge\">\n    <item name=\"fontFamily\">@font/rubik</item>\n    <item name=\"android:fontFamily\">@font/rubik</item>\n    <item name=\"android:textColor\">@color/shrine_pink_900</item>\n</style>\n```\n\nIn `res/drawable/custom_popup_background`:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  <solid android:color=\"?attr/colorSurface\"/>\n  <corners\n    android:radius=\"16dp\"/>\n  <padding\n      android:bottom=\"8dp\"\n      android:top=\"8dp\"/>\n</shape>\n```\n\nUse a custom style instead of overriding `?attr/popupMenuBackground` if you want\nto set a custom background for one type of menu:\n\n```xml\n<style name=\"Theme.App\" parent=\"Theme.Material3.*\">\n    ...\n    <item name=\"popupMenuStyle\">@style/Widget.App.PopupMenu</item>\n</style>\n\n<style name=\"Widget.App.PopupMenu\" parent=\"Widget.Material3.PopupMenu\">\n    <item name=\"android:popupBackground\">@drawable/custom_popupmenu_background</item>\n</style>\n```\n\n### Exposed dropdown menu theming example\n\nExposed dropdown menus support\n[Material Theming](https://material.io/components/chips/#theming) which can\ncustomize color, typography, and shape.\n\n**Note:** The exposed dropdown menu is implemented through the\n`TextInputLayout`. For detailed information on how\n[Material text fields](https://material.io/design/components/text-fields.html)\nwork, see the [TextInputLayout documentation](components/text-fields).\n\nAPI and source code:\n\n*   `TextInputLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputLayout.java)\n*   `AutoCompleteTextView`\n    *   [Class definition](https://developer.android.com/reference/android/widget/AutoCompleteTextView)\n*   `MaterialAutoCompleteTextView`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/MaterialAutoCompleteTextView)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/MaterialAutoCompleteTextView.java)\n\nThe following example shows filled and outlined exposed dropdown menu types with\nMaterial Theming.\n\n<mio-image index=12></mio-image>\n\n### Implementing exposed dropdown menu theming\n\nUse default style theme attributes, styles and theme overlays which adds themes\nto all menus but does not affect other components:\n\n```xml\n<style name=\"Theme.App\" parent=\"Theme.Material3.*\">\n    ...\n    <item name=\"textInputStyle\">@style/Widget.App.ExposedDropdownMenu</item>\n</style>\n\n<style name=\"Widget.App.ExposedDropdownMenu\" parent=\"Widget.Material3.TextInputLayout.*.ExposedDropdownMenu\">\n    <item name=\"materialThemeOverlay\">@style/ThemeOverlay.App.ExposedDropdownMenu</item>\n    <item name=\"shapeAppearance\">@style/ShapeAppearance.App.SmallComponent</item>\n    <item name=\"hintTextColor\">?attr/colorOnSurface</item>\n    <item name=\"endIconTint\">?attr/colorOnSurface</item>\n</style>\n\n<style name=\"ThemeOverlay.App.ExposedDropdownMenu\" parent=\"\">\n    <item name=\"colorPrimary\">@color/shrine_pink_100</item>\n    <item name=\"colorOnSurface\">@color/shrine_pink_900</item>\n    <item name=\"colorError\">@color/shrine_red</item>\n    <item name=\"textAppearanceBodyLarge\">@style/TextAppearance.App.BodyLarge</item>\n    <item name=\"textAppearanceBodySmall\">@style/TextAppearance.App.BodySmall</item>\n    <item name=\"autoCompleteTextViewStyle\">@style/Widget.Material3.AutoCompleteTextView.*</item>\n</style>\n\n<style name=\"TextAppearance.App.BodyLarge\" parent=\"TextAppearance.Material3.BodyLarge\">\n    <item name=\"fontFamily\">@font/rubik</item>\n    <item name=\"android:fontFamily\">@font/rubik</item>\n</style>\n\n<style name=\"TextAppearance.App.BodySmall\" parent=\"TextAppearance.Material3.BodySmall\">\n    <item name=\"fontFamily\">@font/rubik</item>\n    <item name=\"android:fontFamily\">@font/rubik</item>\n</style>\n\n<style name=\"ShapeAppearance.App.SmallComponent\" parent=\"ShapeAppearance.Material3.SmallComponent\">\n    <item name=\"cornerFamily\">cut</item>\n    <item name=\"cornerSize\">4dp</item>\n</style>\n```\n\nor use the style in the layout, which affects only this menu:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    style=\"@style/Widget.App.ExposedDropdownMenu\">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n**Note:** When setting a `materialThemeOverlay` on a custom `TextInputLayout`\nstyle, set `autoCompleteTextViewStyle` to either a\n`@style/Widget.Material3.AutoCompleteTextView.*` style or to a custom one that\ninherits from that. <br/> The `TextInputLayout.*.ExposedDropdownMenu` styles set\n`materialThemeOverlay` to override `autoCompleteTextViewStyle` with the\nspecific `AutoCompleteTextView` style needed. Therefore, you don't need to\nspecify a style tag on the `AutoCompleteTextView`.\n",
    "title": "Menus",
    "image": [
      {
        "case": null,
        "a11y_description": "Menu hero example",
        "file": {
          "width": 1999,
          "height": 754,
          "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_293ae6e29e4b420a9648cf846508437a_/da9bc72e7ce22d5466d4932275b9af1a2c798a87b47943fc3c8be1e70e12255833c07378041e1cd278e80620c1076ce4929d72b2b37ccb282d449b6ab54f7020",
          "url": "/lh3.googleusercontent.com/Kb7vuTWlHrnwuv-8taEKtQZuTzKta54HxDNsUzN864yfInGGIx333w1VErFA8zlmFEW8hRa9JDXi-K6wUy-ReZQHERNZH4CA273evW3urLrys-KsYQ"
        },
        "bordered": true,
        "caption": null
      },
      {
        "case": null,
        "a11y_description": "Composite image of example dropdown and exposed dropdown menu types",
        "file": {
          "width": 2048,
          "height": 940,
          "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_293ae6e29e4b420a9648cf846508437a_/13e3ee536262916e9edd4ea67762d836c54d571e515ce1234308e96abcede4082375a2aec11cc9c6b82050663ed69a456182b3ff18cc83ad7da8eb17fd944ab5",
          "url": "/lh3.googleusercontent.com/X_D_If_smcA-GPD4A-USkWJgj0UgT9YSx2JmTcxI7dfvJiKU7M08lpFsc8-MNb-ZHuh5jVwpx5b6eeMuzlpNVmt0F6MbSVjvL63oGlzeJLFEjBarQeQ"
        },
        "bordered": true,
        "caption": null
      },
      {
        "case": null,
        "a11y_description": "Composite image: purple \"Menus\" bar, and purple \"Menus\" bar with white menu\nand 3 options",
        "file": {
          "width": 1080,
          "height": 650,
          "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_293ae6e29e4b420a9648cf846508437a_/d5dadc3e2f0d1b341fb784613fcb87fde6231cc9803588b5b56f06415e5106f66cae8dba24edb84ee928dd94aea9f6f1a78e67b9fefa89bf09a46e1fa969c64c",
          "url": "/lh3.googleusercontent.com/gh99kXdWMairaR0nsNpVkgE90_dMb74HMzoPfxFIZwIJo2vkJ3wKL8Nd87QdKXqaA1zFImD3ACa0sUbuqpQ1WYU5QapTEB8JOuO18JZLERWbE_d_n9c"
        },
        "bordered": true,
        "caption": null
      },
      {
        "case": null,
        "a11y_description": "White menu window with two options floating over a white background with grey\ntext",
        "file": {
          "width": 1080,
          "height": 463,
          "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_293ae6e29e4b420a9648cf846508437a_/c308438bedef64d236cf034176a68e6bd5c4758eeb0a6e9e91c4762dfd5da830ac7f340ada2280d0210d57412bf6b0b1886a4e2f05b65e05598079b083683520",
          "url": "/lh3.googleusercontent.com/j4Crs8v0RxV8F4W40NQ78y8IANvZfG4ra-hAXxP3qe5WVYycY91eVpyfEQbNZ9vX11qryv-lEK0GO1DoI6laBsoOkxjBHpDGH_Gy0lWx2gzZBVfrjA"
        },
        "bordered": true,
        "caption": null
      },
      {
        "case": null,
        "a11y_description": "White menu container with 3 options open below a purple \"Show menu\" button",
        "file": {
          "width": 1080,
          "height": 655,
          "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_293ae6e29e4b420a9648cf846508437a_/3a9ece693f83eb50c0810d14bc629f88293aa830fe94487f17bbe440a9a7a3b59cd558f6819e2fb6e38842aca960d9eb7e53b0da8698c6166cee415efb52b071",
          "url": "/lh3.googleusercontent.com/n--GNHXqdi6IAWHN4AqGWHN8hWZ1D2Zp2Vzz4H5Hyn13DCUjQtJYxTg8QEA3KVNSJ_32X4SPuwRJrMHveZwvqwxBaKXptGRO3OwUamedoPtLMiVW3nw"
        },
        "bordered": true,
        "caption": null
      },
      {
        "case": null,
        "a11y_description": "White menu window with 3 options open below a purple \"Show menu\" button. Each\noption has an icon.",
        "file": {
          "width": 1080,
          "height": 746,
          "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_293ae6e29e4b420a9648cf846508437a_/243744613f0f55c96c0f809d11beb9598662c3525f4942dfe6c5bf5981be692b55bc48d382d1f6814dff115788a6e93392e5870eb6f6df474faa23f49126c677",
          "url": "/lh3.googleusercontent.com/DQC8wOdRISEh_rVPd8uCJryHd1SvjzYkKBSiSkCd6-9Zm1Cpwafo5cRWWqh6xfhby-6xgKNazfOnjDRy0zNkBNYtUkUJ8xMNs_05Cr-bV8QsJ96Zhrkb"
        },
        "bordered": true,
        "caption": null
      },
      {
        "case": null,
        "a11y_description": "White menu container with 3 options below a purple \"Show menu\" button",
        "file": {
          "width": 1080,
          "height": 851,
          "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_293ae6e29e4b420a9648cf846508437a_/7f7449899e6653b6854d950c1ec540034cb2dbfdccbd5f150950d2cd1bfc2d6065595a02bd2d1a855dd2b24f3c12bcfbddcff952dd54e98cc9419e59b4d9ef69",
          "url": "/lh3.googleusercontent.com/dUS2p3rCcRYLLAqbINsDJNG6BS35MCimP6RCHjoEPybt7rCmylcw6umvXSxSbZLPM1_Nw-baGHJxQTRGYoHlevsSK2jvvI2Qmf4BMHyRjyiEcfA2krE"
        },
        "bordered": true,
        "caption": null
      },
      {
        "case": null,
        "a11y_description": "Menus anatomy diagrams",
        "file": {
          "width": 1999,
          "height": 1045,
          "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_293ae6e29e4b420a9648cf846508437a_/3fdf3f958e1e19bdd6e730ab63e3bdea088c222eb1f7ccb8eb5dfc50e30aa17285220a071ded0ee7a7b3cc1404cce78a3ce71194f354b02952bac496eecea132",
          "url": "/lh3.googleusercontent.com/laHuXPSZTM4O_vqnZXda7hziGjy9ASSB-iISC1EyQ3d_7SXZNLp0JXMi795PoYeXC0YO1dfEtUcPh2uNAmXFvLUkW9hwxQqERmpKwN7OqF8GM8OfIx3O"
        },
        "bordered": true,
        "caption": null
      },
      {
        "case": null,
        "a11y_description": "2 menu states with text field element: 1) has \"item 1\", 2) has \"item 1\" and a\n4-item menu container.",
        "file": {
          "width": 1080,
          "height": 1088,
          "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_293ae6e29e4b420a9648cf846508437a_/fc19c6475eac357ad6f5095c449c90472faceca82417de3dc23a06ace9264596e4ccacff8d9f6b004cba367cdc43daedf1b1cf6b367962433cb9a2ddd49a96d9",
          "url": "/lh3.googleusercontent.com/wAY6SANH7FSIDjD3unZacLO13lhDGveMKaa0SPRYxXSb2DYIRMlGsZ5_439T_YMs9oCv47QCPxqlSz5avTVR9XfI9Ln_o1OcHxWMuYwyVMl_CgKmiZQ"
        },
        "bordered": true,
        "caption": null
      },
      {
        "case": null,
        "a11y_description": "Menu with purple outlined text field element and 4 items. Item 1 selected.",
        "file": {
          "width": 1080,
          "height": 806,
          "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_293ae6e29e4b420a9648cf846508437a_/24ebf0ae74d894bdbd3a3866451ee6b4ca89aae5d40a6dff81bc98ca61036daffd5ccc7ae5927fe5170b1bf157955bada93c8a723da4f4c4f1c070f3ae2ed8b5",
          "url": "/lh3.googleusercontent.com/50YgYjtYrYt-pt2z0cbeScd46k87_auB_rG8WzXaI-XH6dsdrn1CrI2C6uy9Peff1MxlyO5EEpOU3x2Jvjzb0DJq844Tg34zCimJruqLXIe-jsCQww"
        },
        "bordered": true,
        "caption": null
      },
      {
        "case": null,
        "a11y_description": "Exposed dropdown menu anatomy diagram",
        "file": {
          "width": 2048,
          "height": 1070,
          "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_293ae6e29e4b420a9648cf846508437a_/899b0462ee201be46c303101b746518dcabc60bd3bcf192fc713d74b7f9ac6c47612039c93bbfce86c3c3891ec71d26316d1428db98df0998f3ebc1c1c6442d9",
          "url": "/lh3.googleusercontent.com/-UN5DIcokiLQt7ga1W60Cgn7jOvXipS0dEOoHTIyj_AAs9PvkqbXZZpeHaXHib0jbBoK3nlFNVBRBjQsRCYnqWxkmICedLpAA3EbjvXBYc-34INabOc"
        },
        "bordered": true,
        "caption": null
      },
      {
        "case": null,
        "a11y_description": "White menu container with brown text showing 3 options",
        "file": {
          "width": 400,
          "height": 294,
          "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_293ae6e29e4b420a9648cf846508437a_/1764ef3c118e224429b07bf02f93685a5cc7519afda3744d917a3133226e0aeeadef6ca81491b417075e05c2dd39fb499b322f52b6c2edeaa92d1d97e711f32e",
          "url": "/lh3.googleusercontent.com/D12ZcYdcTC8C6Opc_SwZbJ5hA5rCeVZo8hkTEtuawp0WZZ8P3bSSpbGWuar3_ehXTGwLI5AE2GVbixeehq3g2CanaIy7SWB5ZWx7awEkmSaD9c38XK4"
        },
        "bordered": true,
        "caption": null
      },
      {
        "case": null,
        "a11y_description": "Composite image of \"Show menu\" button and options: gray button with pink\nunderline, and white button with pink\noutline",
        "file": {
          "width": 1000,
          "height": 363,
          "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_293ae6e29e4b420a9648cf846508437a_/2f6fe3ba4e94014212938f293059220eb01ad09b5e8d0493f5f62f19eee576ad0f4b91f1418c3e25ec9e8eae775a23fc9b3ed75bb96463bd1099b05602e46156",
          "url": "/lh3.googleusercontent.com/MRNcysCTiR5Z9bsP_I3LkcLnvFTCl5ZIWdQrkjfeMUe4-YuhoI8duuHM7syR5q3m3pWUCi-6HI4Zm2ZSBbznP4A3_9Ylvbx8i4BK4uafeet1ClZat29o"
        },
        "bordered": true,
        "caption": null
      }
    ],
    "up_next_section": {
      "items": []
    },
    "is_beta": false,
    "markdown_path": "docs/components/Menu.md"
  },
  "description": null,
  "hero": {
    "foreground_image": {
      "width": 856,
      "height": 1816,
      "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/e286f570ffd86f14c3c3f3557428aa452c110136489c6c22a5d6e4e54c5fc0c173a1ffde524e3ade64cc288ce10aac1831341aab72cc47bbde1d7a35c29e98bb",
      "url": "/lh3.googleusercontent.com/zqvGbu6yPhiXhq83fBfN4P48ojZfS90Q0-DfV7y9TvTMjbsjcRGeK967jIyX5wWUJl4Dq7SzTZ1ro21dALR8x1ASK2RPBgKEUIvxq0-SV6EIdw-Jyg"
    },
    "foreground_text_light": true,
    "foreground_image_svg": null,
    "foreground_image_alignment": "top",
    "background_image": {
      "width": 1000,
      "height": 1000,
      "file_path": "_f68a99ffe9144467a917320028f1ce3b_/_95f9980dd12d4f8886c881994eaa6a79_/82a5b248d45a8288b7da6f35890170bd09d0c89659b5b16e29362b5b52766bf661a74c41d9da1aeca1cff2c0333cf78ccaf53687b0392e6d7482c6e5fad8e1f8",
      "url": "/lh3.googleusercontent.com/xj2BAR52LdUthUnvq6J-bumCRS03zDlM1fgc6lz4mdmUwAh0fdLo7-SO6n6ExOHDbLxbJ8zXg1VeRpfLzh60EwCyPZxhfPI0IAw2MAnxWPJXDl23oVI"
    }
  },
  "category": "selection",
  "isDisplayed": true
}